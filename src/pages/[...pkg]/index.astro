---
import Layout from "../../layouts/Layout.astro";
import { md } from "../../utils/markdown";
import type { PackageGeneral, PackageDetailed } from "../../types/Package.ts";

interface Props {
  pkg: string;
}

const { pkg } = Astro.params;

if (!pkg) return await error(404);

// Get Version or use latest
let version = "latest";
const list = pkg.split("/");

list.forEach((e) => {
  if (/^v\d+./.test(e)) {
    version = e.substring(1);
  }
});

const packageName = pkg.replace(`/v${version}`, "");
const [general, detailed] = await Promise.all([
  fetch(`https://registry.npmjs.com/${packageName}`).then(
    (res) => res.json() as Promise<PackageGeneral>,
  ),
  fetch(`https://registry.npmjs.com/${packageName}/${version}`).then(
    (res) => res.json() as Promise<PackageDetailed>,
  ),
]);
---

<Layout
  title={`${detailed.name}@${detailed.version}` || "Unknow"}
  description={detailed.description}
>
  <main class="items-center overflow-x-hidden md:p-4">
    <div class="space-y-2 p-3">
      <div class="flex justify-between">
        <h1 class="text-3xl font-bold">
          {detailed.name}
          <span class="font-code opacity-70">{detailed.version}</span>
        </h1>

        <code class="rounded-xl bg-gray-200 px-7 py-2 font-code text-lg">
          npm i {detailed.name}
        </code>
      </div>
      <p class="text-gray-500">
        {detailed.description}
      </p>
      <div>
        {
          detailed.keywords && (
            <div class="flex flex-wrap gap-2">
              {detailed.keywords.slice(0, 5).map((keyword) => (
                <span class="font-code text-sm opacity-80">{keyword}</span>
              ))}{" "}
              {detailed.keywords.length > 5 && (
                <span class="font-code text-sm opacity-80">...</span>
              )}
            </div>
          )
        }
      </div>
    </div>
    <hr />
    <div class="flex">
      <div class="w-3/4">
        <div
          class="prose max-w-full p-2 prose-code:bg-gray-200 prose-code:text-black prose-pre:bg-gray-200 prose-pre:text-black"
          set:html={md.parse(general.readme)}
        />
      </div>
      <div class="w-1/4 space-y-4 border-l border-gray-200 p-2">
        <div>
          <h1 class="text-lg opacity-80">License</h1>
          <p class="rounded-xl bg-gray-200 p-2 font-code text-sm">{detailed.license}</p>
        </div>
        <div>
          <h1 class="text-lg opacity-80">Engine</h1>
          <p class="rounded-xl bg-gray-200 p-2 font-code text-sm">
            {detailed.engines ? detailed.engines.node || "Unknow" : "Unknow"}
          </p>
        </div>
        <div>
          <h1 class="text-lg opacity-80">Author</h1>
          <p class="rounded-xl bg-gray-200 p-2 font-code text-sm">
            {detailed.author ? detailed.author.name : "Unknow"}
          </p>
        </div>
        <div>
          <h1 class="text-lg opacity-80">Release</h1>
          <p class="rounded-xl bg-gray-200 p-2 font-code text-sm">
            {
              general.time
                ? new Date(general.time[detailed.version]).toLocaleDateString()
                : "Unknow"
            }
          </p>
        </div>
        <hr />
        <div
          class={detailed.maintainers
            ? detailed.maintainers.length > 10
              ? ""
              : "grid grid-cols-5 gap-2"
            : "flex"}
        >
          {
            detailed.maintainers
              ? detailed.maintainers.map((user) => {
                  const m = detailed.maintainers?.length;

                  if (m && m < 11) {
                    return (
                      <a class="text-white no-underline" href={`/~${user.name}`}>
                        <div class="mb-2 flex items-center space-x-2">
                          <img
                            class="h-11 w-11 rounded-full"
                            alt={`@${user.name}`}
                            src={`/~${user.name}/profile.png`}
                          />
                        </div>
                      </a>
                    );
                  } else {
                    return (
                      <a class="text-white no-underline" href={`/~${user.name}`}>
                        <span>{user.name},</span>
                      </a>
                    );
                  }
                })
              : detailed.author?.name
          }
        </div>
      </div>
    </div>
  </main>
</Layout>
