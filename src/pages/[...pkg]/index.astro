---
import { Marked } from "marked";
import { markedHighlight } from "marked-highlight";
import hljs from "highlight.js";
import Layout from "../../layouts/Layout.astro";
import type { PackageGeneral, PackageDetailed } from "../../types/Package.ts";

interface Props {
  pkg: string;
}

const { pkg } = Astro.params;
const tab = Astro.url.searchParams.get("tab") || "1";

// Get Version or use latest
let version = "latest";
const list = pkg?.split("/") as string[];

list.map((e) => {
  if (e.startsWith("v")) {
    console.log(e);
    version = e.replace("v", "");
  }
});

const packageName = pkg?.replace(`/v${version}`, "");
const [general, detailed] = await Promise.all([
  fetch(`https://registry.npmjs.com/${packageName}`).then(
    (res) => res.json() as Promise<PackageGeneral>,
  ),
  fetch(`https://registry.npmjs.com/${packageName}/${version}`).then(
    (res) => res.json() as Promise<PackageDetailed>,
  ),
]);

let readme = general.readme;

// Get Readme from GitHub
if (!general.readme) {
  if (general.repository?.type !== "git") return;

  const url = general.repository.url.replace("git+", "").replace("ssh://git@", "");
  const repo = url.split("github.com/")[1].replace(".git", "");

  const data = await fetch(`https://raw.githubusercontent.com/${repo}/main/README.md`).then((res) =>
    res.text(),
  );

  readme = data;
}

const marked = new Marked(
  markedHighlight({
    langPrefix: "hljs language-",
    highlight(code, lang) {
      const language = hljs.getLanguage(lang) ? lang : "plaintext";
      return hljs.highlight(code, { language }).value;
    },
  }),
);
---

<Layout title={pkg || "Unknow"} description={detailed.description}>
  <main class="w-full overflow-x-hidden">
    <div class="rounded-lg bg-surface p-5 pr-8 md:pl-8">
      <div class="bg-surface text-2xl font-semibold">
        <div class="flex justify-between">
          <div>
            {detailed.name}
            <span class="rounded bg-green-600 p-1 pl-2 pr-2 text-xl">{detailed.version}</span>
          </div>

          <div>
            <a
              href={`https://npm.runkit.com/${detailed.name}`}
              class="flex items-center text-sm text-white"
            >
              Try on RunKit
            </a>
          </div>
        </div>
      </div>

      <p class="bg-surface text-lg">
        {detailed.description}
      </p>

      <div>
        {
          detailed.keywords
            ? detailed.keywords.map((keyword: string) => {
                return <span class="pl-1 pr-1 font-semibold">#{keyword}</span>;
              })
            : ""
        }
      </div>
    </div>

    <br />

    <div class="space-y-3 md:flex md:space-x-3">
      <div class="space-y-3 md:w-3/4">
        <div class="flex items-center space-x-3 rounded-lg bg-surface p-3">
          <a href={`/${pkg}`} class={`font-bold ${tab === "1" ? "text-red-400" : "text-white"}`}
            >Readme</a
          >
          <a
            href={`/${pkg}?tab=2`}
            class={`font-bold ${tab === "2" ? "text-red-400" : "text-white"}`}>Version</a
          >
          <a
            href={`/${pkg}?tab=3`}
            class={`font-bold ${tab === "3" ? "text-red-400" : "text-white"}`}>Dependencies</a
          >
        </div>

        {
          tab === "1" ? (
            <div class="max-w-full rounded-lg bg-surface p-3" set:html={marked.parse(readme)} />
          ) : tab === "2" ? (
            <div class="grid grid-cols-6 rounded-lg bg-surface p-3">
              {Object.keys(general.versions)
                .reverse()
                .map((key: string) => {
                  return <span class="p-1 text-lg">{key}</span>;
                })}
            </div>
          ) : (
            <div class="break-words rounded-lg bg-surface p-3">
              <h1 class="text-lg font-bold">Dependecies</h1>
              <div>
                {Object.keys(detailed.dependencies || {}).map((key) => {
                  return <span class="p-1 text-lg">{key}</span>;
                })}
              </div>

              <h1 class="text-lg font-bold">Dev dependecies</h1>
              <div>
                {Object.keys(detailed.devDependencies || {}).map((key) => {
                  return <span class="p-1 text-lg">{key}</span>;
                }) || "No dev dependencies"}
              </div>
            </div>
          )
        }
      </div>

      <div class="rounded-lg bg-surface pb-2 pl-4 pr-4 pt-2 md:w-1/4">
        <div>
          <h2>Install</h2>
          <code class="rounded-lg border bg-background p-2 pl-5 pr-5">
            npm i {detailed.name}
          </code>
        </div>
        <div>
          <h2>Metadata</h2>
          <ul class="list-disc pl-5">
            <li>
              License: {detailed.license || "Unknown"}
            </li>

            <li>
              Node: {detailed.engines ? detailed.engines.node || "Whatever" : "Whatever"}
            </li>

            <li>
              Author: {detailed.author?.name || "Unknown"}
            </li>
          </ul>
        </div>
        <div>
          <h2>Maintainers</h2>
          <div>
            {
              detailed.maintainers
                ? detailed.maintainers.map((user) => {
                    const m = detailed.maintainers?.length;

                    if (m && m < 11) {
                      return (
                        <a class="text-white no-underline" href={`/~${user.name}`}>
                          <div class="mb-2 flex items-center space-x-2">
                            <img
                              class="h-10 w-10 rounded-full"
                              src={`/~${user.name}/profile.png`}
                            />
                            <span>{user.name}</span>
                            <br />
                          </div>
                        </a>
                      );
                    } else {
                      return (
                        <a class="text-white no-underline" href={`/~${user.name}`}>
                          <span>{user.name},</span>
                        </a>
                      );
                    }
                  })
                : detailed.author?.name
            }
          </div>
        </div>
      </div>
    </div>

    <style is:global>
      a {
        @apply text-blue-600 no-underline hover:underline;
      }

      img {
        @apply max-w-full rounded;
      }

      pre {
        @apply rounded bg-background p-2;
      }

      pre code {
        @apply w-full overflow-x-scroll font-code;
      }

      code {
        @apply rounded bg-background text-sm;
      }

      /* Code Block */
      pre code span {
        @apply font-code;
      }

      .hljs-keyword {
        @apply text-purple-400;
      }

      .hljs-built_in,
      .hljs-title {
        @apply text-blue-400;
      }

      .hljs-string {
        @apply text-green-400;
      }

      .hljs-variable {
        @apply text-white;
      }

      .hljs-params {
        @apply text-red-400;
      }

      .hljs-property {
        @apply text-blue-300;
      }

      .hljs-comment {
        @apply text-opacity-95;
      }

      .hljs-name {
        @apply text-orange-400;
      }

      .hljs-attr {
        @apply text-sky-200;
      }
    </style>
  </main>
</Layout>
